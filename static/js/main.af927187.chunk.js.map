{"version":3,"sources":["reportWebVitals.ts","defines/cat-api-define.ts","utils/network-utils.ts","services/cat-api.ts","defines/types.ts","utils/cat-utilities.tsx","components/ItemScoringComponent/index.tsx","services/facebook-sdk/fb-audience-sdk-wrapper.ts","components/PopupComponent/index.tsx","components/AudienceTableComponent/index.tsx","pages/ScoringItemPage/index.tsx","pages/EventLogPage/index.tsx","pages/UrlFilterPage/index.tsx","pages/VideoPlayerPage/index.tsx","pages/VideoPlayerIframePage/index.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Api","IS_DEV","DEV_HOST","PROD_HOST","HOST","GET_SCORING_CONDITION","POST_USER_LIST","POST_USER_LIST_FROM_URL","POST_USER_INFO","POST_USER_IDENTIFIES_LIST_URL","GET_EVENT_LOGS","GET_EVENT_LOG_FROM_ID","NetworkUtils","url","callback","responseType","XMLHttp","XMLHttpRequest","open","timeout","setRequestHeader","onreadystatechange","readyState","status","responseText","response","send","params","token","length","JSON","stringify","CatApi","getRequest","object","data","postRequest","audience_id","anonymous_ids","rs","latestId","toString","MOCK_TEST","FormItemName","CatUtilities","options","map","it","Option","columnKeyList","columnList","Object","keys","dataSource","iter","index","key","columns","title","toUpperCase","dataIndex","rows","csvContent","e","join","encodedUri","encodeURI","window","ItemScoringComponent","props","defaultItem","useRef","source","conditionName","scoringConditions","name","condition","operator","threshold","unit","rowOrder","useState","item","setItem","conditionNames","operators","conditions","units","conditionUnits","dataRender","setDataRender","useEffect","onRecieved","alignMarginLeft","className","Item","EVENT","style","display","width","marginLeft","rules","required","message","placeholder","onChange","current","scoringCondition","find","value","generateOptions","OPERATOR","cond","conditionType","THRESHOLD","type","v","target","valueAsNumber","UNIT","onAddItemClickCallback","onClick","ev","FBAudienceSDKWrapper","FB_TOKEN","AD_ACCOUNT_ID","DEBUG_LOG_FB_INFO","this","init","FacebookAdsApi","setDebug","finishCallback","ids","reduce","acc","curr","indexOf","push","audienceName","createCustomAudience","PostCreateAudienceByCustomerList","resp","doRenameCustomAudience","apiCallName","console","log","fields","AdAccount","customAudienceID","newCustomAudienceName","sample_code","CustomAudience","update","logApiCallResult","customAudiences","getCustomAudiences","AdsPixel","get","instance","PopupComponent","React","confirmLoading","setConfirmLoading","centered","visible","onOk","onOKCallback","okText","cancelText","onCancel","onCancelCallback","AudienceTableComponent","list","drawContent","setDrawContent","loadingCSV","setLoadingCSV","visiblePopup","setVisiblePopup","temp","PostUserIdentifiesList","result","exportCSV","loading","bordered","expandable","expandedRowRender","record","rowData","hasOwnProperty","isLoading","PostUserInfo","json2TableSource","scroll","x","screen","y","height","Instance","createAudienceFromAnonymousIds","ScoringItemPage","setLoading","itemList","setItemList","audiences","setAudiences","useRefCollectData","itemScoringConditionList","GetScoringConditionAsync","eventNameKey","onRecievedItemScoringData","onAddItemScoringConditions","opr","Header","Content","labelCol","span","wrapperCol","onFinish","tempOperator","scoringItems","PostUserList","dataSources","audience","onFieldsChange","ITEM_NAME","label","SOURCE","GROUP","orientation","orientationMargin","offset","htmlType","EventLogPage","loadingRef","keywordRef","setData","ContainerHeight","GetEventLog","setLogs","timer","setInterval","id","GetEventLogFromID","success","REFRESH_DURATION","clearInterval","logs","filterLogs","sort","right","left","filter","toLowerCase","keyword","toLocaleLowerCase","itemHeight","itemKey","onScroll","gutter","wrap","order","textAlign","UrlFilterPage","SCHEMA","URL","schema","PostUserListFromUrl","VideoPlayerPage","ClikTracker","segmentId","facebookPixelId","analyzerIntializationCallback","onStart","sendCustomTrack","videoPlayer","ref","muted","preload","controls","onPlay","autoPlay","VideoPlayerIframePage","ReactDOM","render","to","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.af927187.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default class Api {\n    static readonly IS_DEV: boolean = false;\n    static readonly DEV_HOST: string = \"http://localhost:8009\";\n    static readonly PROD_HOST: string = \"https://ci-cat-api.clik.vn\";\n    static readonly HOST: string = Api.IS_DEV ? Api.DEV_HOST : Api.PROD_HOST;\n    static readonly GET_SCORING_CONDITION: string = `${Api.HOST}/scoringCondition`\n    static readonly POST_USER_LIST: string = `${Api.HOST}/scoringCondition/getUserList/`\n    static readonly POST_USER_LIST_FROM_URL: string = `${Api.HOST}/scoringCondition/getUserListFromUrl/`\n    static readonly POST_USER_INFO: string = `${Api.HOST}/scoringCondition/getUserInfo/`\n    static readonly POST_USER_IDENTIFIES_LIST_URL: string = `${Api.HOST}/scoringCondition/getUserIdentifiesList/`\n    static readonly GET_EVENT_LOGS: string = `${Api.HOST}/eventLog`;\n    static readonly GET_EVENT_LOG_FROM_ID: string = `${Api.HOST}/eventLog/id?id=`;\n}","export default class NetworkUtils {\n    static getRequest(\n        url: string,\n        callback: Function,\n        responseType: XMLHttpRequestResponseType = 'json'\n    ) {\n        let XMLHttp = new XMLHttpRequest()\n        XMLHttp.open(\"GET\", url, true);\n        XMLHttp.timeout = 30000; // time in milliseconds\n        XMLHttp.responseType = responseType;\n        XMLHttp.setRequestHeader(\"Content-Type\", \"application/json\");\n        XMLHttp.onreadystatechange = () => {\n            if (XMLHttp.readyState === 4) {\n                if (XMLHttp.status === 200) {\n                    switch (XMLHttp.responseType) {\n                        case 'text':\n                            callback(XMLHttp.responseText)\n                            break\n                        default:\n                            callback(XMLHttp.response)\n                            break\n                    }\n                }\n                else if (XMLHttp.status >= 400 || XMLHttp.status === 0) {\n                    callback(null)\n                }\n            }\n        }\n        XMLHttp.send()\n    }\n\n    static getRequestWithBodyParams(\n        url: string,\n        callback: Function,\n        responseType: XMLHttpRequestResponseType = 'json'\n    ) {\n        let XMLHttp = new XMLHttpRequest()\n        XMLHttp.open(\"GET\", url, true);\n        XMLHttp.timeout = 30000; // time in milliseconds\n        XMLHttp.responseType = responseType;\n        XMLHttp.setRequestHeader(\"Content-Type\", \"application/json\");\n        XMLHttp.onreadystatechange = () => {\n            if (XMLHttp.readyState === 4) {\n                if (XMLHttp.status === 200) {\n                    switch (XMLHttp.responseType) {\n                        case 'text':\n                            callback(XMLHttp.responseText)\n                            break\n                        default:\n                            callback(XMLHttp.response)\n                            break\n                    }\n                }\n                else if (XMLHttp.status >= 400 || XMLHttp.status === 0) {\n                    callback(null)\n                }\n            }\n        }\n        XMLHttp.send()\n    }\n\n    static postRequest(\n        url: string,\n        params: Object,\n        callback: Function,\n        token: string = '',\n        responseType: XMLHttpRequestResponseType = 'json'\n    ) {\n        let XMLHttp = new XMLHttpRequest()\n        XMLHttp.open(\"POST\", url, true);\n        XMLHttp.timeout = 30000; // time in milliseconds\n        XMLHttp.responseType = responseType;\n        if (token.length > 0) {\n            XMLHttp.setRequestHeader('Authorization', `Bearer ${token}`);\n        }\n        XMLHttp.setRequestHeader(\"Content-Type\", \"application/json\");\n        XMLHttp.onreadystatechange = () => {\n            if (XMLHttp.readyState === 4) {\n                if (XMLHttp.status === 200) {\n                    switch (XMLHttp.responseType) {\n                        case 'text':\n                            callback(XMLHttp.responseText)\n                            break\n                        default:\n                            callback(XMLHttp.response)\n                            break\n                    }\n                }\n                else if (XMLHttp.status >= 400 || XMLHttp.status === 0) {\n                    callback(null);\n                }\n            }\n        }\n        XMLHttp.send(JSON.stringify(params));\n    }\n}","import Api from '../defines/cat-api-define';\nimport NetworkUtils from '../utils/network-utils';\n\nclass CatApi {\n    static GetScoringConditionAsync(callback: Function) {\n        NetworkUtils.getRequest(Api.GET_SCORING_CONDITION, (object: any) => callback(object));\n    }\n\n    static PostScoringConditionAsync(data: Object, callback: Function) {\n        NetworkUtils.postRequest(Api.GET_SCORING_CONDITION, data, (object: any) => callback(object));\n    }\n\n    static PostUserList(data: Object, callback: Function) {\n        NetworkUtils.postRequest(Api.POST_USER_LIST, data, (object: any) => callback(object));\n    }\n\n    static PostUserListFromUrl(data: Object, callback: Function) {\n        NetworkUtils.postRequest(Api.POST_USER_LIST_FROM_URL, data, (object: any) => callback(object));\n    }\n\n\n    static PostUserInfo(data: Object, callback: Function) {\n        NetworkUtils.postRequest(Api.POST_USER_INFO, data, (object: any) => callback(object))\n    }\n\n    static PostUserIdentifiesList(data: Object, callback: Function) {\n        NetworkUtils.postRequest(Api.POST_USER_IDENTIFIES_LIST_URL, data, (object: any) => callback(object))\n    }\n\n    //#region FACEBOOK API\n    static PostCreateAudienceByCustomerList(audience_id: string, anonymous_ids: string[], token: string, callback: Function) {\n        //Refer document https://developers.facebook.com/docs/marketing-api/audiences/guides/custom-audiences\n        NetworkUtils.postRequest(\n            `https://graph.facebook.com/v13.0/${audience_id}/users`,\n            {\n                \"payload\": {\n                    \"schema\": \"EXTERN_ID\",\n                    \"data\": [...anonymous_ids]\n                }\n            },\n            (object: any) => callback(object),\n            token\n        )\n    }\n    //#endregion FACEBOOK API\n\n    //EVENT_LOG\n    static MOCK_TEST = { \"result\": [{ \"id\": 82, \"event\": \"RESUMED HOME PROFILE\", \"ip\": \"171.248.97.185\", \"at\": \"2022-05-26T05:53:46.987Z\" }, { \"id\": 84, \"event\": \"RESUMED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:19.744Z\" }, { \"id\": 86, \"event\": \"RESUMED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:23.578Z\" }, { \"id\": 88, \"event\": \"INTERRUPTED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:22.708Z\" }, { \"id\": 90, \"event\": \"VIEWED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:25.611Z\" }, { \"id\": 92, \"event\": \"INTERRUPTED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:28.367Z\" }, { \"id\": 94, \"event\": \"RESUMED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:30.340Z\" }, { \"id\": 96, \"event\": \"INTERRUPTED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:30.968Z\" }, { \"id\": 98, \"event\": \"RESUMED PROJECT\", \"ip\": \"222.252.27.28\", \"at\": \"2022-05-26T06:57:40.453Z\" }, { \"id\": 100, \"event\": \"RESUMED PROJECT\", \"ip\": \"116.110.42.170\", \"at\": \"2022-05-26T06:57:19.744Z\" }] }\n    static GetEventLog(callback: Function) {\n        // static readonly GET_EVENT_LOGS: string = `${Api.HOST}/eventLog`;\n        // static readonly GET_EVENT_LOG_FROM_ID: string = `${Api.HOST}/eventLog/id?id=`;\n        //lcheat\n        //callback(CatApi.MOCK_TEST)\n\n        NetworkUtils.getRequest(\n            Api.GET_EVENT_LOGS,\n            (rs) => callback(rs),\n            'json'\n        )\n    }\n\n    static GetEventLogFromID(latestId: number, callback: Function) {\n\n        NetworkUtils.getRequest(\n            Api.GET_EVENT_LOG_FROM_ID + latestId.toString(),\n            (rs) => callback(rs));\n\n        //lcheat\n        // let rs = CatApi.MOCK_TEST.result.map((it, index) => {\n        //     return {\n        //         id: latestId + index + 1,\n        //         event: it.event,\n        //         ip: it.ip,\n        //         at: it.at\n        //     }\n        // })\n        //callback({ result: rs.splice(-2) });\n    }\n}\n\nexport default CatApi\n","export enum FormItemName {\n    ITEM_NAME = \"form-scoring-item-name\",\n    SOURCE = \"form-source\",\n    GROUP = \"form-group\",\n    EVENT = \"form-track-event-name\",\n    OPERATOR = \"form-operator\",\n    THRESHOLD = \"form-value\",\n    UNIT = \"form-unit\",\n    OPERATOR_ROW = 'form-operator-row',\n    SCHEMA= 'form-schema',\n    URL='form-url',\n}\n\nexport interface ConditionType {\n    condition: string //\"Equal, Or\"\n    conditionUnits: string[] //[\"Time\", \"Second\", \"Minutes\"]\n}\n\nexport interface ScroingCondition {\n    name: string\n    conditions: ConditionType[]\n}\n\nexport interface ItemScoringCondition {\n    scoringConditions: ScroingCondition[]\n    source: string\n}\n\nexport interface TreeDataType {\n    title: string\n    value: string\n}\n\nexport interface ItemScoringCollectData {\n    source: string\n    conditionName: string\n    condition: string\n    threshold: number\n    unit: string\n    operator: string\n    rowOrder: number\n}\n","import { Select } from \"antd\"\n\nexport default class CatUtilities {\n    static generateOptions(options: string[]): JSX.Element[] {\n        return (\n            options.map(it => <Select.Option key={it}>{it}</Select.Option>)\n        )\n    }\n\n    static json2TableSource(object: any, columnKeyList: Object): any {\n        const columnList = Object.keys(columnKeyList);\n        return {\n            dataSource: object.map((iter: any, index: number) => {\n                return {\n                    key: index,\n                    ...iter\n                }\n            }),\n            columns: columnList.map((it, index) => {\n                return {\n                    title: it.toUpperCase(),\n                    key: it,\n                    dataIndex: it\n                }\n            })\n        }\n    }\n\n    static exportCSV(rows: Array<any>) {\n        let csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(e => e.join(\",\")).join(\"\\n\");\n        var encodedUri = encodeURI(csvContent);\n        window.open(encodedUri);\n    }\n}\n","import { ScroingCondition, ItemScoringCollectData, FormItemName } from \"../../defines/types\"\nimport { FC, useEffect, useRef, useState } from \"react\"\nimport { Form, Select, Input, Button } from \"antd\"\nimport CatUtilities from \"../../utils/cat-utilities\"\nimport './styles.css';\n\ntype ItemScoringComponentType = {\n    scoringConditions: ScroingCondition[]\n    source: string\n    rowOrder: number\n    onRecieved: (data: any) => void\n    onAddItemClickCallback?: (ev: any, operator: string) => void\n    operator?: string\n}\n\nconst ItemScoringComponent: FC<ItemScoringComponentType> = (props) => {\n    let defaultItem = useRef<ItemScoringCollectData>({\n        source: props.source,\n        conditionName: props.scoringConditions[0].name,\n        condition: '',\n        operator: props.operator || 'none',\n        threshold: 0,\n        unit: '',\n        rowOrder: props.rowOrder\n    });\n    \n    const [item, setItem] = useState({});\n    let [dataRender, setDataRender] = useState<{ conditionNames: string[], operators: string[], units: string[] }>({\n        conditionNames: props.scoringConditions.map(it => it.name),\n        operators: props.scoringConditions[0].conditions.map(it => it.condition),\n        units: props.scoringConditions[0].conditions[0].conditionUnits\n    })\n\n    useEffect(() => {\n        props.onRecieved && props.onRecieved(item);\n    }, [item])\n\n    const onSelectCondition = (cond: string) => {\n        defaultItem.current.condition = cond;\n        setItem({ ...defaultItem.current });\n        const scoringCondition = props.scoringConditions.find(scoringCondition => scoringCondition.name === defaultItem.current.conditionName);\n        const conditionType = scoringCondition?.conditions.find(it => it.condition === cond);\n        setDataRender({\n            conditionNames: dataRender.conditionNames,\n            operators: dataRender.operators,\n            units: conditionType?.conditionUnits || ['']\n        })\n    }\n\n    const onChangeEvent = (conditionName: string) => {\n        defaultItem.current.conditionName = conditionName;\n        setItem({ ...defaultItem.current });\n        const scoringCondition: any = props.scoringConditions.find(it => it.name === defaultItem.current.conditionName);\n        setDataRender({\n            conditionNames: props.scoringConditions.map((it: any) => it.name),\n            operators: scoringCondition.conditions.map((it: any) => it.condition),\n            units: scoringCondition.conditions[0].conditionUnits.map((it: any) => it)\n        })\n    }\n\n    const onChangeThreshold = (v: any) => {\n        defaultItem.current.threshold = v.target.valueAsNumber;\n        setItem({\n            ...defaultItem.current\n        });\n    }\n\n    const onSelectUnit = (v: string) => {\n        defaultItem.current.unit = v;\n        setItem({\n            ...defaultItem.current\n        });\n    }\n\n    const onSelectOperator = (v: string) => {\n        defaultItem.current.operator = v;\n        setItem({\n            ...defaultItem.current\n        });\n    }\n\n    const onAddItemClick = (ev: any) => {\n        props.onAddItemClickCallback && props.onAddItemClickCallback(ev, defaultItem.current.operator);\n    }\n\n    const alignMarginLeft = \"10px\"\n    return (\n        <div className=\"item-scoring-component_div-parent\">\n            <Form.Item name={`${FormItemName.EVENT}${props.rowOrder}`}\n                style={{ display: 'inline-block', width: '200px', marginLeft: alignMarginLeft }}\n                rules={[{ required: true, message: \"Need an event\" }]}>\n                <Select\n                    placeholder={'Select an event'}\n                    onChange={onChangeEvent}\n                    value={defaultItem.current.conditionName}\n                    style={{ display: 'inline-block', width: '200px', marginLeft: alignMarginLeft }}\n                >\n                    {CatUtilities.generateOptions(dataRender.conditionNames)}\n                </Select>\n            </Form.Item>\n            <Form.Item name={`${FormItemName.OPERATOR}${props.rowOrder}`}\n                style={{ display: 'inline-block', width: '200px', marginLeft: alignMarginLeft }}\n                rules={[{ required: true, message: \"Need a condition\" }]}>\n                <Select\n                    placeholder={'Select a condition'}\n                    onChange={onSelectCondition}\n                    value={defaultItem.current.condition}\n                    style={{ display: 'inline-block', width: '200px', marginLeft: alignMarginLeft }}\n                >\n                    {CatUtilities.generateOptions(dataRender.operators)}\n                </Select>\n            </Form.Item>\n            <Form.Item\n                name={`${FormItemName.THRESHOLD}${props.rowOrder}`}\n                style={{ display: 'inline-block', width: '100px', marginLeft: alignMarginLeft }}\n                rules={[{ required: true, message: \"Need input value\" }]}>\n                <Input type=\"number\"\n                    style={{ display: 'inline-block', width: '100px', marginLeft: alignMarginLeft }}\n                    onChange={onChangeThreshold} />\n            </Form.Item>\n            <Form.Item\n                name={`${FormItemName.UNIT}${props.rowOrder}`}\n                style={{ display: 'inline-block', width: '200px', marginLeft: alignMarginLeft }}\n                rules={[{ required: true, message: \"Need an unit\" }]}>\n                <Select\n                    placeholder={'Select an unit'}\n                    onChange={onSelectUnit}\n                    value={defaultItem.current.unit}\n                    style={{ display: 'inline-block', width: '200px', marginLeft: alignMarginLeft }}\n                >\n                    {CatUtilities.generateOptions(dataRender.units)}\n                </Select>\n            </Form.Item>\n            {props.onAddItemClickCallback && (\n                <div style={{ display: \"inline-block\", width: 'calc(75%)', marginLeft: alignMarginLeft }} >\n                    <Button type=\"primary\"\n                        onClick={onAddItemClick}>ADD</Button>\n                    <Select\n                        placeholder={'Select an operator'}\n                        onChange={onSelectOperator}\n                        value={defaultItem.current.operator}\n                    >\n                        {CatUtilities.generateOptions(['AND', 'OR'])}\n                    </Select>\n                </div>\n            )}\n        </div>\n    )\n}\nexport default ItemScoringComponent;\n","import { AdAccount, AdsPixel, FacebookAdsApi, CustomAudience } from 'facebook-nodejs-business-sdk';\nimport CatApi from '../cat-api';\n\nexport default class FBAudienceSDKWrapper {\n    readonly FB_TOKEN: string = 'EAAnD7XHdZC2MBAN8v6OK5Obk9VZABNsCsop4tAkJ3PhYkpuYQOrJeA15jgGODR7ZAVfRqxY1QYPvqujGrGVY7udnF8UbbbpSRRCJDVDpeAJZA2K0DOnqp3uS8EI0C60VBoq1wlhVAkZBOjTpaLMd1OP8O4WxkeBOlmc61QgJ0n3bz0DoGZCKZCUbMKpj9GcVB3P5Tb18ZACmuQZDZD';\n    readonly AD_ACCOUNT_ID: string = 'act_249479240486885';\n    readonly DEBUG_LOG_FB_INFO: boolean = false; // Setting this to true shows more debugging info.\n\n    private static instance: FBAudienceSDKWrapper = null;\n    public static get Instance(): FBAudienceSDKWrapper {\n        if (FBAudienceSDKWrapper.instance == null) {\n            FBAudienceSDKWrapper.instance = new FBAudienceSDKWrapper();\n        }\n        return FBAudienceSDKWrapper.instance;\n    }\n\n    constructor() {\n        this.init();\n    }\n\n    private init() {\n        const api = FacebookAdsApi.init(this.FB_TOKEN);\n        api.setDebug(this.DEBUG_LOG_FB_INFO);\n    }\n\n    createAudienceFromAnonymousIds(anonymous_ids: string[], finishCallback: Function) {\n        //filter unique anonymous id list\n        let ids = anonymous_ids.reduce((acc, curr) => {\n            if (acc.indexOf(curr) === -1) {\n                acc.push(curr);\n            }\n            return acc;\n        }, []);\n        let audienceName = 'Custom Audience List';\n        let customAudienceResp = this.createCustomAudience(audienceName);\n        customAudienceResp.then(rs => {\n            CatApi.PostCreateAudienceByCustomerList(rs['id'], ids, this.FB_TOKEN, (resp) => finishCallback(resp))\n            this.doRenameCustomAudience(rs['id'], `${audienceName} ${rs['id']}`)\n        });\n    }\n\n    logApiCallResult(apiCallName: string, data: any) {\n        console.log(apiCallName);\n        console.log(JSON.stringify(data));\n    };\n\n    createCustomAudience(audienceName: string) {\n        let fields: any, params: any;\n        fields = [];\n        params = {\n            'name': audienceName,\n            'subtype': 'CUSTOM',\n            'description': 'People who visited the clik websites',\n            'customer_file_source': 'USER_PROVIDED_ONLY',\n        };\n        const customAudiences = (new AdAccount(this.AD_ACCOUNT_ID)).createCustomAudience(fields, params);\n        return customAudiences;\n    }\n\n    doRenameCustomAudience(customAudienceID: string, newCustomAudienceName: string) {\n        let fields, params;\n        fields = [\n        ];\n        params = {\n            'name': newCustomAudienceName,\n        };\n        const sample_code = (new CustomAudience(customAudienceID)).update(\n            fields,\n            params\n        );\n        this.logApiCallResult('Rename audience name complete with code', sample_code);\n    }\n\n    onReadCustomAudience() {\n        let fields, params;\n        fields = [\n            'name',\n            'rule',\n        ];\n        params = {\n        };\n        const customAudiences = (new AdAccount(this.AD_ACCOUNT_ID)).getCustomAudiences(\n            fields,\n            params\n        );\n        this.logApiCallResult('getCustomAudiences api call complete.', customAudiences);\n        return customAudiences;\n    }\n\n    onReadCodePixel() {\n        let fields, params;\n        fields = [\n            'code',\n        ];\n        params = {\n        };\n        const sample_code = (new AdsPixel('960279851551574')).get(\n            fields,\n            params\n        );\n        this.logApiCallResult('PIXEL CODE COMPLETE', sample_code);\n    }\n}\n","import React, { FC } from 'react';\nimport { Modal } from 'antd';\n\ninterface PopupComponentType {\n    title: string,\n    message: string,\n    onCancelCallback: Function,\n    cancelText:string,\n    onOKCallback?: Function,\n    okText:string\n}\n\nconst PopupComponent: FC<PopupComponentType> = (props) => {\n    const [confirmLoading, setConfirmLoading] = React.useState(false);\n    //const [modalText, setModalText] = React.useState(props.message);\n\n    const handleOk = () => {\n        setConfirmLoading(true);\n        if (typeof props.onOKCallback === 'function') {\n            props.onOKCallback();\n        }\n    };\n\n    const handleCancel = () => {\n        if (typeof props.onCancelCallback === 'function') {\n            props.onCancelCallback();\n        }\n    };\n\n    return (\n        <>\n            <Modal\n                centered={true}\n                title={props.title}\n                visible={true}\n                onOk={handleOk}\n                okText={props.okText}\n                cancelText={props.cancelText}\n                confirmLoading={confirmLoading}\n                onCancel={handleCancel}\n            >\n                <p>{props.message}</p>\n            </Modal>\n        </>\n    );\n};\n\nexport default PopupComponent;","import { FC, useEffect, useState } from \"react\"\nimport { Table, Button, Space } from \"antd\"\nimport CatApi from \"../../services/cat-api\"\nimport CatUtilities from \"../../utils/cat-utilities\"\nimport FBAudienceSDKWrapper from \"../../services/facebook-sdk/fb-audience-sdk-wrapper\"\nimport PopupComponent from \"../PopupComponent\"\nimport './styles.css'\n\ntype AudienceTableComponentType = {\n    columns: any\n    dataSource: any\n}\n\nconst AudienceTableComponent: FC<AudienceTableComponentType> = (props) => {\n    const [drawContent, setDrawContent] = useState<any>({});\n    const [loadingCSV, setLoadingCSV] = useState<boolean>(false);\n    const [visiblePopup, setVisiblePopup] = useState<boolean>(false);\n    const onExpandedRowRender = (rowData: any, key: string) => {\n        if (!drawContent.hasOwnProperty(key)) {\n            drawContent[key] = {\n                isLoading: true,\n                dataSource: [],\n                columns: []\n            }\n            CatApi.PostUserInfo({ \"anonymous_id\": key }, (result: any) => {\n                if (result && result.length > 0) {\n                    drawContent[rowData['user_id']] = CatUtilities.json2TableSource(result, result[0])\n                }\n                drawContent[key].isLoading = false;\n                setDrawContent({\n                    ...drawContent\n                });\n            })\n        }\n\n        return (\n            <div className=\"item-scoring-component_audience-table-expand\" key={key}>\n                <Table\n                    loading={drawContent[key].isLoading}\n                    columns={drawContent[key].columns}\n                    dataSource={drawContent[key].dataSource}\n                    scroll={{ x: window.screen.width * 0.3, y: window.screen.height * 0.3 }}\n                    bordered\n                />\n            </div>\n        )\n    }\n\n    const generateDownloadCSVAndCreate = (list: string[]) => {\n        if (list.length < 1) {\n            return <></>\n        }\n        return (\n            <Space>\n                <Button onClick={(temp) => {\n                    setLoadingCSV(true);\n                    const list = props.dataSource.map((item: any) => item['user_id']);\n                    CatApi.PostUserIdentifiesList({ 'anonymous_ids': list }, (result: Object[]) => {\n                        if (result.length > 0) {\n                            const rows = [\n                                [...Object.keys(result[0]).map(key => key)],\n                                ...result.map((it: any) => {\n                                    return [...Object.keys(it).map(key => it[key])];\n                                })\n                            ];\n                            CatUtilities.exportCSV(rows);\n                        }\n                        setLoadingCSV(false);\n                    })\n                }} loading={loadingCSV}>Download</Button>\n                <Button onClick={() => {\n                    setVisiblePopup(true);\n                }}>Create Custom Audience</Button>\n            </Space>\n        )\n    }\n    const columns = [...props.columns];\n\n    useEffect(() => {\n        console.log(\"CHECK RENDER AUDIENCE TABLE\");\n    }, [])\n\n    return (\n        <div className=\"item-scoring-component_audience-table\">\n            {\n                generateDownloadCSVAndCreate(columns)\n            }\n            <Table\n                columns={columns}\n                dataSource={props.dataSource}\n                bordered\n                expandable={{\n                    expandedRowRender: (record) => onExpandedRowRender(record, record['user_id'] || '')\n                }}\n            />\n            {visiblePopup\n                && <PopupComponent\n                    title=\"Create Facebook Custom Audience\"\n                    message=\"Do you want to create facebook custom audience ?\"\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                    onCancelCallback={() => {\n                        setVisiblePopup(false)\n                    }}\n                    onOKCallback={() => {\n                        const list = props.dataSource.map((item: any) => item['user_id']);\n                        FBAudienceSDKWrapper.Instance.createAudienceFromAnonymousIds(list, (resp) => {\n                            setVisiblePopup(false)\n                        });\n                    }}\n                />\n            }\n        </div >\n    )\n}\nexport default AudienceTableComponent;\n","import { FC, useEffect, useRef, useState } from \"react\";\nimport CatApi from \"../../services/cat-api\";\nimport ItemScoringComponent from \"../../components/ItemScoringComponent\";\nimport { FormItemName, ItemScoringCollectData, ItemScoringCondition, ScroingCondition } from \"../../defines/types\";\nimport { Layout, Button, Input, Form, Divider, Select } from 'antd';\nimport CatUtilities from \"../../utils/cat-utilities\";\nimport AudienceTableComponent from \"../../components/AudienceTableComponent\";\n\nimport './styles.css';\n\n\ninterface ItemData {\n    scoringConditions: ScroingCondition[]\n    source: string\n    eventNameKey: string\n    operator: string\n}\n\nconst ScoringItemPage: FC = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [itemList, setItemList] = useState<ItemData[]>([]);\n    const [audiences, setAudiences] = useState<any>({\n        columns: [],\n        dataSource: []\n    });\n    const useRefCollectData = useRef<ItemScoringCollectData[]>([]);\n    const itemScoringConditionList = useRef<ItemScoringCondition[]>([]);\n\n    const groupNames = [\"Scoring Group A\", \"Scoring Group B\"];\n\n    useEffect(() => {\n        CatApi.GetScoringConditionAsync((list: ItemScoringCondition[]) => {\n            if (!list || list.length < 1) {\n                return;\n            }\n            itemScoringConditionList.current = list;\n            setItemList([{\n                scoringConditions: list[0].scoringConditions,\n                source: list[0].source,\n                eventNameKey: list[0].scoringConditions[0].name,\n                operator: 'none'\n            }])\n        })\n    }, []);\n\n    const onChangeSource = (source: any) => {\n        console.log('onChangeSource ' + source, itemScoringConditionList);\n        const item: any = itemScoringConditionList.current.find((item: any) => item.source === source)\n        let it = itemList.find(it => it.source === source)\n        if (it) return;\n        setItemList([{\n            scoringConditions: item.scoringConditions || [],\n            source: item?.source || '',\n            eventNameKey: item?.scoringConditions[0].name || '',\n            operator: \"none\"\n        }])\n\n    };\n\n    const onChangeGroup = (ev: any) => {\n        console.log(`onChangeGroup ${ev}`);\n    }\n\n    const onRecievedItemScoringData = (data: ItemScoringCollectData) => {\n        if (Object.keys(data).length < 1) return;\n        const item = useRefCollectData.current.find((it, index) => {\n            if (it.rowOrder === data.rowOrder) {\n                useRefCollectData.current[index] = { ...data };\n            }\n            return it;\n        });\n        if (!item) {\n            useRefCollectData.current.push(data)\n        }\n    }\n\n    const onAddItemScoringConditions = (ev: any, opr: string) => {\n        setItemList([\n            ...itemList, {\n                ...itemList[0],\n                operator: opr\n            }\n        ])\n    }\n\n    const onFormFinish = (fields: any) => {\n        console.log(fields);\n        setLoading(true);\n\n        let params = {\n            \"scoringItems\": [\n                ...useRefCollectData.current\n            ]\n        }\n        //validate params\n        let tempOperator = 'none'\n        params.scoringItems = params.scoringItems.map((it, index) => {\n            tempOperator = it.operator\n            it.operator = index === 0 ? 'none' : tempOperator;\n            return it;\n        })\n\n        console.log(params);\n        CatApi.PostUserList(\n            params,\n            (object: any) => {\n                let audiences: any = { dataSources: [], columns: [] };\n                if (object && object.length > 0) {\n                    const columnList = Object.keys(object[0]);\n                    console.log(columnList, object);\n                    audiences = {\n                        dataSource: object.map((audience: any, index: number) => {\n                            return {\n                                key: index,\n                                ...audience\n                            }\n                        }),\n                        columns: columnList.map((it, index) => {\n                            return {\n                                title: it.toUpperCase(),\n                                key: it,\n                                dataIndex: it\n                            }\n                        })\n                    }\n                }\n                setAudiences(audiences);\n                setLoading(false);\n            }\n        )\n    };\n\n    const layoutConfigure = {\n        labelCol: {\n            span: 3,\n        },\n        wrapperCol: {\n            span: 6,\n        },\n    };\n\n    return (\n        <Layout>\n            <Layout.Header>SCORING ITEM</Layout.Header>\n            <Layout.Content>\n                <Form\n                    {...layoutConfigure}\n                    onFinish={onFormFinish}\n                    onFieldsChange={() => { setLoading(false) }}\n                >\n                    <Divider></Divider>\n                    <Form.Item name={FormItemName.ITEM_NAME} label=\"Scoring Item Name\" rules={[{ required: true }]}>\n                        <Input  ></Input>\n                    </Form.Item>\n                    <Form.Item name={FormItemName.SOURCE} label=\"Sources\" rules={[{ required: true }]}>\n                        <Select\n                            placeholder={'Enter Name'}\n                            onChange={onChangeSource}\n                        >\n                            {CatUtilities.generateOptions(itemScoringConditionList.current.map((it: any) => it.source))}\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        name={FormItemName.GROUP}\n                        label=\"Add to Scoring Group\"\n                        rules={[{ required: true }]}\n                    >\n                        <Select\n                            placeholder={'Select a scoring group'}\n                            onChange={onChangeGroup}\n                        >\n                            {CatUtilities.generateOptions(groupNames)}\n                        </Select>\n                    </Form.Item>\n                    <Divider orientation=\"left\" orientationMargin=\"0\">\n                        <div>Condition for scoring item</div>\n                    </Divider>\n                    {\n                        itemList.map((it, index: number) => {\n                            return (\n                                <ItemScoringComponent\n                                    scoringConditions={it.scoringConditions}\n                                    source={it.source}\n                                    operator={it.operator}\n                                    onRecieved={onRecievedItemScoringData}\n                                    key={index.toString()}\n                                    onAddItemClickCallback={onAddItemScoringConditions}\n                                    rowOrder={index}\n                                />\n                            )\n                        })\n                    }\n                    <Form.Item wrapperCol={{ span: 1.5, offset: 8 }}>\n                        <Button type=\"primary\" htmlType=\"submit\" loading={loading}>View Result</Button>\n                    </Form.Item>\n                </Form>\n                {\n                    <AudienceTableComponent dataSource={audiences.dataSource} columns={audiences.columns} />\n                }\n            </Layout.Content>\n        </Layout>\n    )\n}\n\nexport default ScoringItemPage;\n","import { FC, useRef } from \"react\";\nimport \"./styles.scss\";\nimport { List, message } from \"antd\";\nimport VirtualList from \"rc-virtual-list\";\nimport { useEffect, useState } from \"react\";\nimport CatApi from \"../../services/cat-api\";\nimport { Input } from \"antd\";\nimport { Row } from \"antd\";\nimport { Col } from \"antd\";\n\ninterface EventLog {\n    result: LogCellData[]\n}\n\ninterface LogCellData {\n    id: number,\n    event: string,\n    ip: string,\n    at: string,\n    project_name: string\n}\n\nconst EventLogPage: FC = () => {\n    const MS_S = 1000;\n    const REFRESH_DURATION = 3;\n\n    const loadingRef = useRef(false);\n    const keywordRef = useRef('');\n    const list = useRef<LogCellData[]>([]);\n    const [data, setData] = useState<LogCellData[]>([]);\n    const ContainerHeight = window.screen.height * 7 / 10;\n\n    useEffect(() => {\n        loadingRef.current = true;\n        CatApi.GetEventLog((rs: EventLog) => {\n            if (rs) {\n                list.current = rs.result\n                setLogs([...list.current]);\n            }\n            loadingRef.current = false;\n        })\n\n        let timer = setInterval(() => {\n            if (list.current.length < 1 || loadingRef.current) return;\n            let latestId = list.current[list.current.length - 1].id;\n            loadingRef.current = true;\n            CatApi.GetEventLogFromID(latestId || 0, (rs: EventLog) => {\n                if (rs && rs.result.length > 0) {\n                    list.current = [...list.current, ...rs.result];\n                    setLogs([...list.current]);\n                    message.success(`${rs.result.length} more items loaded!`);\n                }\n                loadingRef.current = false;\n            })\n        }, REFRESH_DURATION * MS_S);\n\n        return () => {\n            clearInterval(timer);\n        }\n    }, []);\n\n    const onScroll = (e) => {\n        // if (\n        //     e.currentTarget.scrollHeight - e.currentTarget.scrollTop ===\n        //     ContainerHeight\n        // ) {\n        //     //appendData();\n        // }\n    };\n\n    const filter = (e) => {\n        const keyword = e.target.value;\n        if (keyword.toLowerCase() !== keywordRef.current.toLocaleLowerCase()) {\n            keywordRef.current = keyword;\n            setLogs([...list.current]);\n        }\n    };\n\n    const setLogs = (logs: LogCellData[]) => {\n        let filterLogs = logs.sort((right, left) => left.id - right.id);\n        if (keywordRef.current.length > 0) {\n            filterLogs = filterLogs.filter(it => JSON.stringify(it).toLowerCase().indexOf(keywordRef.current.toLowerCase()) !== -1);\n        }\n        setData([...filterLogs]);\n    }\n\n    const inputSearchWidth = 600;\n    return (\n        <div className=\"container\">\n            <Input\n                type=\"search\"\n                onChange={filter}\n                className=\"input\"\n                placeholder=\"Enter words to filter\"\n                style={{ width: `${inputSearchWidth}px` }}\n            />\n            <List>\n                <VirtualList\n                    data={data}\n                    height={ContainerHeight}\n                    itemHeight={50}\n                    itemKey=\"id\"\n                    onScroll={onScroll}\n                >\n                    {(item) => (\n                        <Row gutter={[24, 16]} wrap>\n                            {Object.keys(item).map((key, index) => {\n                                if (key === 'id') {\n                                    return null;\n                                }\n                                return (\n                                    <Col span={4} order={index} style={{ textAlign: 'center' }}>\n                                        {item[key]}\n                                    </Col>\n                                )\n                            })}\n                        </Row>\n                    )}\n                </VirtualList>\n            </List>\n        </div>\n    )\n}\nexport default EventLogPage;\n","import { FC, useState } from \"react\";\nimport CatApi from \"../../services/cat-api\";\nimport { FormItemName } from \"../../defines/types\";\nimport { Layout, Button, Input, Form, Divider } from 'antd';\nimport AudienceTableComponent from \"../../components/AudienceTableComponent\";\n\nimport './styles.css';\n\n\nconst UrlFilterPage: FC = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [audiences, setAudiences] = useState<any>({\n        columns: [],\n        dataSource: []\n    });\n\n    const onFormFinish = (fields: any) => {\n        console.log(fields);\n        setLoading(true);\n\n        let params = {\n            \"schema\": fields[FormItemName.SCHEMA],\n            \"url\": fields[FormItemName.URL]\n        }\n        //validate params\n        if(!params.schema || !params.url)\n            return;\n\n        console.log(params);\n        CatApi.PostUserListFromUrl(\n            params,\n            (object: any) => {\n                let audiences: any = { dataSources: [], columns: [] };\n                if (object && object.length > 0) {\n                    const columnList = Object.keys(object[0]);\n                    console.log(columnList, object);\n                    audiences = {\n                        dataSource: object.map((audience: any, index: number) => {\n                            return {\n                                key: index,\n                                ...audience\n                            }\n                        }),\n                        columns: columnList.map((it, index) => {\n                            return {\n                                title: it.toUpperCase(),\n                                key: it,\n                                dataIndex: it\n                            }\n                        })\n                    }\n                }\n                setAudiences(audiences);\n                setLoading(false);\n            }\n        )\n    };\n\n    const layoutConfigure = {\n        labelCol: {\n            span: 3,\n        },\n        wrapperCol: {\n            span: 6,\n        },\n    };\n\n    return (\n        <Layout>\n            <Layout.Header>SCORING ITEM</Layout.Header>\n            <Layout.Content>\n                <Form\n                    {...layoutConfigure}\n                    onFinish={onFormFinish}\n                    onFieldsChange={() => { setLoading(false) }}\n                >\n                    <Divider></Divider>\n                    <Form.Item name={FormItemName.SCHEMA} label=\"Schema\" rules={[{ required: true }]}>\n                        <Input  ></Input>\n                    </Form.Item>\n\n                    <Form.Item name={FormItemName.URL} label=\"Url\" rules={[{ required: true }]}>\n                        <Input  ></Input>\n                    </Form.Item>\n                    \n                    <Divider orientation=\"left\" orientationMargin=\"0\">\n                        <div>Condition for scoring item</div>\n                    </Divider>\n                    <Form.Item wrapperCol={{ span: 1.5, offset: 8 }}>\n                        <Button type=\"primary\" htmlType=\"submit\" loading={loading}>View Result</Button>\n                    </Form.Item>\n                </Form>\n                {\n                    <AudienceTableComponent dataSource={audiences.dataSource} columns={audiences.columns} />\n                }\n            </Layout.Content>\n        </Layout>\n    )\n}\n\nexport default UrlFilterPage;\n","import { useRef, FC } from \"react\";\nimport \"./styles.scss\";\nimport { useEffect } from \"react\";\nimport ReactPlayer from 'react-player';\n\ndeclare global {\n    interface Window {\n        ClikTracker: any;\n    }\n}\n\n\nconst VideoPlayerPage: FC = () => {\n\n    const REACT_APP_SEGMENT_WRITE_KEY = \"sgeBXs58FAJ7bGVNbqafaZnACEcXnagV\"\n    const REACT_APP_FB_PIXEL_ID = \"5289742354424222\"\n\n    useEffect(() => {\n        window.ClikTracker.init({\n            segmentId: REACT_APP_SEGMENT_WRITE_KEY,\n            facebookPixelId: REACT_APP_FB_PIXEL_ID,\n            analyzerIntializationCallback:(result)=>{\n                console.log(result);    \n            }\n        })\n        return () => {\n        }\n    }, []);\n\n    const onStart=()=>\n    {\n        window.ClikTracker.sendCustomTrack(\"START\", \"VIDEO\",{})\n    }\n\n    let videoPlayer = useRef(null);\n    return (\n        <div className=\"container\">\n            <ReactPlayer \n                ref={videoPlayer}\n                url={'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'}\n                muted={true}\n                preload={\"auto\"}\n                controls={true}\n                onPlay={onStart}\n                onStart={onStart}\n                autoPlay />;\n        </div>\n    )\n}\nexport default VideoPlayerPage;\n","import { useRef, FC } from \"react\";\nimport \"./styles.scss\";\nimport { useEffect } from \"react\";\nimport ReactPlayer from 'react-player';\n\ndeclare global {\n    interface Window {\n        ClikTracker: any;\n    }\n}\n\n\nconst VideoPlayerIframePage: FC = () => {\n\n    const REACT_APP_SEGMENT_WRITE_KEY = \"sgeBXs58FAJ7bGVNbqafaZnACEcXnagV\"\n    const REACT_APP_FB_PIXEL_ID = \"1188788575241237\"\n\n    useEffect(() => {\n        window.ClikTracker.init({\n            segmentId: REACT_APP_SEGMENT_WRITE_KEY,\n            facebookPixelId: REACT_APP_FB_PIXEL_ID,\n            analyzerIntializationCallback:(result)=>{\n                console.log(result);    \n            }\n        })\n        return () => {\n        }\n    }, []);\n\n    const onStart=()=>\n    {\n        window.ClikTracker.sendCustomTrack(\"START\", \"VIDEO\",{})\n    }\n\n    let videoPlayer = useRef(null);\n    return (\n        <div className=\"container\">\n            <ReactPlayer \n                ref={videoPlayer}\n                url={'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'}\n                muted={true}\n                preload={\"auto\"}\n                controls={true}\n                onPlay={onStart}\n                onStart={onStart}\n                autoPlay />;\n        </div>\n    )\n}\nexport default VideoPlayerIframePage;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport HomePage from './pages/HomePage';\nimport { Routes } from 'react-router';\nimport { BrowserRouter, Link, Route } from 'react-router-dom';\nimport ScoringItemPage from './pages/ScoringItemPage';\nimport EventLogPage from './pages/EventLogPage';\nimport UrlFilterPage from \"./pages/UrlFilterPage\"\nimport VideoPlayerPage from './pages/VideoPlayerPage';\nimport VideoPlayerIframePage from './pages/VideoPlayerIframePage';\n\n\nReactDOM.render(\n    \n  <BrowserRouter>\n  <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/cat\">CAT</Link>\n            </li>\n            <li>\n              <Link to=\"/eventlog\">EventLog</Link>\n            </li>\n            <li>\n              <Link to=\"/urlfilter\">UrlFilter</Link>\n            </li>\n            <li>\n              <Link to=\"/videoplayer\">Video</Link>\n            </li>\n          </ul>\n        </nav>\n  <Routes>\n    <Route path=\"/\" element={<VideoPlayerIframePage />} />\n    <Route path=\"cat\" element={<ScoringItemPage />} />\n    <Route path=\"eventlog\" element={<EventLogPage />} />\n    <Route path=\"urlfilter\" element={<UrlFilterPage />} />\n    <Route path=\"videoplayer\" element={<VideoPlayerPage />} />\n    <Route path=\"videoplayeriframe\" element={<VideoPlayerIframePage />} />\n  </Routes>\n</BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}